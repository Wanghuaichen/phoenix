; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\app\src\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;37     */
;;;38     int main(void)
000000  f7fffffe          BL       bsp_Init
;;;39     {
;;;40     	/*
;;;41     		ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;42     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM
;;;43     	*/
;;;44     	bsp_Init();		/* 硬件初始化 */
;;;45     	
;;;46     	g_MainStatus = 0;	/* 初始状态为状态0 */
000004  2000              MOVS     r0,#0
000006  490f              LDR      r1,|L1.68|
000008  7008              STRB     r0,[r1,#0]
;;;47     	
;;;48     	/* 状态机大循环 */
;;;49     	while (1)
00000a  e01a              B        |L1.66|
                  |L1.12|
;;;50     	{
;;;51     		switch (g_MainStatus)
00000c  480d              LDR      r0,|L1.68|
00000e  7800              LDRB     r0,[r0,#0]  ; g_MainStatus
000010  b120              CBZ      r0,|L1.28|
000012  2801              CMP      r0,#1
000014  d008              BEQ      |L1.40|
000016  2802              CMP      r0,#2
000018  d112              BNE      |L1.64|
00001a  e00b              B        |L1.52|
                  |L1.28|
;;;52     		{
;;;53     			case 0:			/* 上电执行一次。LED1闪烁3次，每次间隔1秒。3次后状态机返回。*/
;;;54     				status_0();	
00001c  f7fffffe          BL       status_0
;;;55     				g_MainStatus = 1;	/* 转移到状态1 */
000020  2001              MOVS     r0,#1
000022  4908              LDR      r1,|L1.68|
000024  7008              STRB     r0,[r1,#0]
;;;56     				break;
000026  e00b              B        |L1.64|
                  |L1.40|
;;;57     			
;;;58     			case 1:			/* LED1 - LED4 依次流水显示。每次点亮1个LED。状态持续5秒后返回。 */
;;;59     				status_1();		
000028  f7fffffe          BL       status_1
;;;60     				g_MainStatus = 2;	/* 转移到状态2 */
00002c  2002              MOVS     r0,#2
00002e  4905              LDR      r1,|L1.68|
000030  7008              STRB     r0,[r1,#0]
;;;61     				break;
000032  e005              B        |L1.64|
                  |L1.52|
;;;62     			
;;;63     			case 2:
;;;64     				status_2();	/* LED1 - LED4 依次流水显示。每次点亮3个LED, 熄灭1个。状态持续5秒后返回。*/
000034  f7fffffe          BL       status_2
;;;65     				g_MainStatus = 1;	/* 转移到状态1 */
000038  2001              MOVS     r0,#1
00003a  4902              LDR      r1,|L1.68|
00003c  7008              STRB     r0,[r1,#0]
;;;66     				break;
00003e  bf00              NOP      
                  |L1.64|
000040  bf00              NOP                            ;56
                  |L1.66|
000042  e7e3              B        |L1.12|
;;;67     		}	
;;;68     	}
;;;69     }
;;;70     
                          ENDP

                  |L1.68|
                          DCD      g_MainStatus

                          AREA ||i.status_0||, CODE, READONLY, ALIGN=1

                  status_0 PROC
;;;78     */
;;;79     static void status_0(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	/* 关闭LED */
;;;82     	bsp_LedOff(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       bsp_LedOff
;;;83     	bsp_LedOff(2);
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       bsp_LedOff
;;;84     	bsp_LedOff(3);
00000e  2003              MOVS     r0,#3
000010  f7fffffe          BL       bsp_LedOff
;;;85     	bsp_LedOff(4);
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       bsp_LedOff
;;;86     	
;;;87     	/* 点亮 LED1 */
;;;88     	bsp_LedOn(1);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       bsp_LedOn
;;;89     	
;;;90     	bsp_StartTimer(0, 3000);		/* 定时器0是3000ms 单次定时器 */		
000020  f64031b8          MOV      r1,#0xbb8
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       bsp_StartTimer
;;;91     	bsp_StartAutoTimer(1, 500);		/* 定时器1是500ms 自动重装定时器, 控制LED1按1Hz频率翻转闪烁 */
00002a  f44f71fa          MOV      r1,#0x1f4
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       bsp_StartAutoTimer
;;;92     	while (1)
000034  e00d              B        |L2.82|
                  |L2.54|
;;;93     	{			
;;;94     		bsp_Idle();		/* CPU空闲时执行的函数，在 bsp.c */
000036  f7fffffe          BL       bsp_Idle
;;;95     		
;;;96     		/* 这个地方可以插入其他任务 */		
;;;97     		
;;;98     		/* bsp_CheckTimer()检查定时器1时间是否到。函数形参表示软件定时器的ID, 值域0 - 3 */
;;;99     		if (bsp_CheckTimer(1))		
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       bsp_CheckTimer
000040  b110              CBZ      r0,|L2.72|
;;;100    		{
;;;101    			bsp_LedToggle(1);		/* 间隔500ms 翻转一次 LED1 */
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       bsp_LedToggle
                  |L2.72|
;;;102    		}
;;;103    		
;;;104    		/* 检查定时器0时间是否到 */
;;;105    		if (bsp_CheckTimer(0))
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       bsp_CheckTimer
00004e  b100              CBZ      r0,|L2.82|
;;;106    		{
;;;107    			/* 3秒定时到后退出本状态 */
;;;108    			break;
000050  e000              B        |L2.84|
                  |L2.82|
000052  e7f0              B        |L2.54|
                  |L2.84|
000054  bf00              NOP      
;;;109    		}
;;;110    	}
;;;111    	
;;;112    	/* 任务结束时，应该关闭定时器，因为他们会占用后台的资源 */
;;;113    	//bsp_StopTimer(0);	 单次定时器如果超时到过一次后，可以不必关闭
;;;114    	bsp_StopTimer(1);
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       bsp_StopTimer
;;;115    }
00005c  bd10              POP      {r4,pc}
;;;116    
                          ENDP


                          AREA ||i.status_1||, CODE, READONLY, ALIGN=1

                  status_1 PROC
;;;124    */
;;;125    static void status_1(void)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127    	uint8_t led_no = 1;		/* LED指示灯序号 1-4 */
000002  2401              MOVS     r4,#1
;;;128    	
;;;129    	bsp_StartTimer(0, 5000);		/* 定时器0是5000ms 单次定时器 */
000004  f2413188          MOV      r1,#0x1388
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       bsp_StartTimer
;;;130    	bsp_StartAutoTimer(1, 200);		/* 定时器1是500ms 自动重装定时器, 控制LED1按1Hz频率翻转闪烁 */
00000e  21c8              MOVS     r1,#0xc8
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       bsp_StartAutoTimer
;;;131    	bsp_LedOn(1);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       bsp_LedOn
;;;132    	led_no = 1;
00001c  bf00              NOP      
;;;133    	while (1)
00001e  e01f              B        |L3.96|
                  |L3.32|
;;;134    	{			
;;;135    		bsp_Idle();		/* CPU空闲时执行的函数，在 bsp.c */
000020  f7fffffe          BL       bsp_Idle
;;;136    		
;;;137    		/* 这个地方可以插入其他任务 */		
;;;138    		
;;;139    		/* 检查定时器0时间是否到 */
;;;140    		if (bsp_CheckTimer(0))
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       bsp_CheckTimer
00002a  b100              CBZ      r0,|L3.46|
;;;141    		{
;;;142    			break;
00002c  e019              B        |L3.98|
                  |L3.46|
;;;143    		}
;;;144    
;;;145    		if (bsp_CheckTimer(1))		/* 检查自动定时器2，间隔200ms翻转一次LED1 */
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       bsp_CheckTimer
000034  b1a0              CBZ      r0,|L3.96|
;;;146    		{
;;;147    			/* 先关闭所有的LED，然后在打开其中一个 */
;;;148    			bsp_LedOff(1);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       bsp_LedOff
;;;149    			bsp_LedOff(2);
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       bsp_LedOff
;;;150    			bsp_LedOff(3);
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       bsp_LedOff
;;;151    			bsp_LedOff(4);
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       bsp_LedOff
;;;152    			
;;;153    			if (++led_no == 5)
00004e  1c60              ADDS     r0,r4,#1
000050  b2c0              UXTB     r0,r0
000052  4604              MOV      r4,r0
000054  2805              CMP      r0,#5
000056  d100              BNE      |L3.90|
;;;154    			{
;;;155    				led_no = 1;
000058  2401              MOVS     r4,#1
                  |L3.90|
;;;156    			}
;;;157    
;;;158    			bsp_LedOn(led_no);	/* 点亮其中一个LED */	
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       bsp_LedOn
                  |L3.96|
000060  e7de              B        |L3.32|
                  |L3.98|
000062  bf00              NOP                            ;142
;;;159    		}		
;;;160    	}
;;;161    	
;;;162    	/* 任务结束时，应该关闭定时器，因为他们会占用后台的资源 */
;;;163    	//bsp_StopTimer(0);	 单次定时器如果超时到过一次后，可以不必关闭
;;;164    	bsp_StopTimer(1);
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       bsp_StopTimer
;;;165    }
00006a  bd10              POP      {r4,pc}
;;;166    
                          ENDP


                          AREA ||i.status_2||, CODE, READONLY, ALIGN=1

                  status_2 PROC
;;;174    */
;;;175    static void status_2(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177    	uint8_t led_no = 1;		/* LED指示灯序号 1-4 */
000002  2401              MOVS     r4,#1
;;;178    	
;;;179    	bsp_StartTimer(0, 5000);		/* 定时器0是5000ms 单次定时器 */
000004  f2413188          MOV      r1,#0x1388
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       bsp_StartTimer
;;;180    	bsp_StartAutoTimer(1, 200);		/* 定时器1是500ms 自动重装定时器, 控制LED1按1Hz频率翻转闪烁 */
00000e  21c8              MOVS     r1,#0xc8
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       bsp_StartAutoTimer
;;;181    	bsp_LedOn(1);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       bsp_LedOn
;;;182    	led_no = 1;
00001c  bf00              NOP      
;;;183    	while (1)
00001e  e01f              B        |L4.96|
                  |L4.32|
;;;184    	{			
;;;185    		bsp_Idle();		/* CPU空闲时执行的函数，在 bsp.c */
000020  f7fffffe          BL       bsp_Idle
;;;186    		
;;;187    		/* 这个地方可以插入其他任务 */		
;;;188    		
;;;189    		/* 检查定时器0时间是否到 */
;;;190    		if (bsp_CheckTimer(0))
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       bsp_CheckTimer
00002a  b100              CBZ      r0,|L4.46|
;;;191    		{
;;;192    			break;
00002c  e019              B        |L4.98|
                  |L4.46|
;;;193    		}
;;;194    
;;;195    		if (bsp_CheckTimer(1))		/* 检查自动定时器2，间隔200ms翻转一次LED1 */
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       bsp_CheckTimer
000034  b1a0              CBZ      r0,|L4.96|
;;;196    		{
;;;197    			/* 先打开所有的LED，然后在关闭其中一个 */
;;;198    			bsp_LedOn(1);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       bsp_LedOn
;;;199    			bsp_LedOn(2);
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       bsp_LedOn
;;;200    			bsp_LedOn(3);
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       bsp_LedOn
;;;201    			bsp_LedOn(4);
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       bsp_LedOn
;;;202    			
;;;203    			if (++led_no == 5)
00004e  1c60              ADDS     r0,r4,#1
000050  b2c0              UXTB     r0,r0
000052  4604              MOV      r4,r0
000054  2805              CMP      r0,#5
000056  d100              BNE      |L4.90|
;;;204    			{
;;;205    				led_no = 1;
000058  2401              MOVS     r4,#1
                  |L4.90|
;;;206    			}
;;;207    
;;;208    			bsp_LedOff(led_no);	/* 点亮其中一个LED */			
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       bsp_LedOff
                  |L4.96|
000060  e7de              B        |L4.32|
                  |L4.98|
000062  bf00              NOP                            ;192
;;;209    		}		
;;;210    	}
;;;211    	
;;;212    	/* 任务结束时，应该关闭定时器，因为他们会占用后台的资源 */
;;;213    	//bsp_StopTimer(0);	 单次定时器如果超时过一次后，可以不必执行stop函数
;;;214    	bsp_StopTimer(1);
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       bsp_StopTimer
;;;215    }
00006a  bd10              POP      {r4,pc}
;;;216    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  g_MainStatus
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_35463e5c____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_35463e5c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_35463e5c____REVSH|
#line 128
|__asm___6_main_c_35463e5c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
